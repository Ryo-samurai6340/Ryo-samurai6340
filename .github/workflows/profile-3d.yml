name: GitHub Profile 3D Contrib

on:
  schedule: # 7:00am (UTC) == 0:00am (PDT)
    - cron: "0 7 * * *"
  workflow_dispatch:

  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: generate-github-profile-3d-contrib
    steps:
      - uses: actions/checkout@v3
      - uses: yoshi389111/github-profile-3d-contrib@0.7.1
        env:
          GITHUB_TOKEN: ${{ secrets.PROFILE_3D_TOKEN }}
          USERNAME: ${{ github.repository_owner }}

      # Install Python dependencies to generate the GitHub App token
      - name: Install Python dependencies
        run: |
          sudo apt-get install python3-pip
          pip3 install PyJWT requests

      # Generate the GitHub App token for pushing to the protected branch
      - name: Generate GitHub App Token
        id: generate_token
        run: |
          python3 <<EOF
          import jwt, time, requests
          from os import environ

          app_id = "YOUR_APP_ID"  # Replace with your GitHub App's ID
          private_key = environ['APP_PRIVATE_KEY']

          # Generate the JWT (https://docs.github.com/en/rest/apps/apps?apiVersion=2022-11-28#create-a-jwt-for-an-app)
          payload = {
              "iat": int(time.time()),
              "exp": int(time.time()) + (10 * 60),  # JWT expiration time (10 minutes maximum)
              "iss": app_id
          }

          # Create the JWT token
          encoded_jwt = jwt.encode(payload, private_key, algorithm="RS256")

          # Get the app's installation ID
          headers = {"Authorization": f"Bearer {encoded_jwt}", "Accept": "application/vnd.github+json"}
          url = "https://api.github.com/app/installations"
          response = requests.get(url, headers=headers)
          installation_id = response.json()[0]['id']

          # Generate an installation access token
          token_url = f"https://api.github.com/app/installations/{installation_id}/access_tokens"
          token_response = requests.post(token_url, headers=headers)
          token = token_response.json()['token']

          print(f"::set-output name=token::{token}")
          EOF
        env:
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

      # Commit and push the changes to the main branch using the GitHub App token
      - name: Commit & Push
        env:
          GITHUB_APP_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          git config user.name github-actions
          git config user.email github-actions[bot]@users.noreply.github.com
          git add -A .
          if git commit -m "generated"; then
            git push https://x-access-token:${{ steps.generate_token.outputs.token }}@github.com/${{ github.repository_owner }}/$(basename $GITHUB_REPOSITORY) HEAD:main
          fi
